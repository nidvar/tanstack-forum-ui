/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as IndexRouteImport } from './routes/index'
import { Route as PostsIndexRouteImport } from './routes/posts/index'
import { Route as PostsNewIndexRouteImport } from './routes/posts/new/index'
import { Route as PostsPostIdIndexRouteImport } from './routes/posts/$postId/index'

const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const PostsIndexRoute = PostsIndexRouteImport.update({
  id: '/posts/',
  path: '/posts/',
  getParentRoute: () => rootRouteImport,
} as any)
const PostsNewIndexRoute = PostsNewIndexRouteImport.update({
  id: '/posts/new/',
  path: '/posts/new/',
  getParentRoute: () => rootRouteImport,
} as any)
const PostsPostIdIndexRoute = PostsPostIdIndexRouteImport.update({
  id: '/posts/$postId/',
  path: '/posts/$postId/',
  getParentRoute: () => rootRouteImport,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/posts': typeof PostsIndexRoute
  '/posts/$postId': typeof PostsPostIdIndexRoute
  '/posts/new': typeof PostsNewIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/posts': typeof PostsIndexRoute
  '/posts/$postId': typeof PostsPostIdIndexRoute
  '/posts/new': typeof PostsNewIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/posts/': typeof PostsIndexRoute
  '/posts/$postId/': typeof PostsPostIdIndexRoute
  '/posts/new/': typeof PostsNewIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/posts' | '/posts/$postId' | '/posts/new'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/posts' | '/posts/$postId' | '/posts/new'
  id: '__root__' | '/' | '/posts/' | '/posts/$postId/' | '/posts/new/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  PostsIndexRoute: typeof PostsIndexRoute
  PostsPostIdIndexRoute: typeof PostsPostIdIndexRoute
  PostsNewIndexRoute: typeof PostsNewIndexRoute
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/posts/': {
      id: '/posts/'
      path: '/posts'
      fullPath: '/posts'
      preLoaderRoute: typeof PostsIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/posts/new/': {
      id: '/posts/new/'
      path: '/posts/new'
      fullPath: '/posts/new'
      preLoaderRoute: typeof PostsNewIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/posts/$postId/': {
      id: '/posts/$postId/'
      path: '/posts/$postId'
      fullPath: '/posts/$postId'
      preLoaderRoute: typeof PostsPostIdIndexRouteImport
      parentRoute: typeof rootRouteImport
    }
  }
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  PostsIndexRoute: PostsIndexRoute,
  PostsPostIdIndexRoute: PostsPostIdIndexRoute,
  PostsNewIndexRoute: PostsNewIndexRoute,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
